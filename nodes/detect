#!/usr/bin/env python3

import rospy
from hri_fullbody.fullbody_detector import FullbodyDetector
import random
from hri_msgs.msg import IdsList


def generate_id():
    """This function generates a 5 chars ID.
    To avoid misenterpretation of the ID as an exponential
    number, the 'e' letter is not in the pool."""

    return "".join(random.sample("abcdf0123456789", 5))


class MultibodyManager:
    def __init__(self, use_depth, stickman_debug):

        self.use_depth = use_depth
        self.stickman_debug = stickman_debug

        # Dictionary for the detected people
        self.detected_bodies = {}
        # id = uni
        # self.detected_bodies[id][0] = personal id

        # Subscriber for the list of detected bodies
        self.bodies_list_sub = rospy.Subscriber(
            "/humans/bodies/tracked", IdsList, self.ids_list_cb, queue_size=1
        )

    def ids_list_cb(self, msg):

        current_bodies = {}

        for id in msg.ids:
            if id in self.detected_bodies:
                current_bodies[id] = (self.detected_bodies[id][0], 0)
            else:
                current_bodies[id] = (
                    FullbodyDetector(
                        self.use_depth,
                        self.stickman_debug,
                        id,
                    ),
                    0,
                )
                rospy.loginfo("Generated single person detector for body_%s", id)
                rospy.loginfo(
                    "Waiting for frames on topic %s",
                    current_bodies[id][0].get_image_topic(),
                )

        for id in self.detected_bodies:
            if not id in current_bodies:
                self.detected_bodies[id][0].unregister()

        self.detected_bodies = current_bodies


if __name__ == "__main__":

    rospy.init_node("fullbody_manager", anonymous=True)

    use_depth = rospy.get_param("~use_depth", False)
    stickman_debug = rospy.get_param("~stickman_debug", False)
    single_body = rospy.get_param("~single_body", True)
    manager = None

    rospy.loginfo("Using depth camera for body position estimation: %s", str(use_depth))
    if single_body:
        rospy.loginfo("Setting up for single body pose estimation")
    else:
        rospy.loginfo("Setting up for multibody pose estimation")

    if not single_body:
        manager = MultibodyManager(use_depth, stickman_debug)
        rospy.loginfo("Waiting for ids on /humans/bodies/tracked")
    else:
        rospy.logwarn(
            "hri_fullbody running in single body mode:"
            + " only one skeleton will be detected"
        )
        id = generate_id()
        current_body = FullbodyDetector(use_depth, stickman_debug, id, single_body)
        rospy.loginfo("Generated single person detector for body_%s", id)
        rospy.loginfo("Waiting for frames on topic %s", current_body.get_image_topic())

    rospy.spin()
